library(pacman)
add <- function(x,y=1) { x + y}
formals(add)
body(add)
environment(add)
typeof(NULL)
length(NULL)
typeof(NA)
length(NA)
lm(c(1:10)~c(10:30))
lm(c(1:10)~c(10:20))
c(1:10)
c(10:20)
lm(c(1:10)~c(11:20))
lm_obj <- lm(c(1:10)~c(11:20))
tricky_list <- lm(c(1:10)~c(11:20))
names(tricky_list)
# Guess where the regression model is stored
names(tricky_list)
# Use names() and str() on the model element
names(tricky_list[["model"]])
str(tricky_list[["model"]])
tricky_list <- lm(formula = mpg ~ wt, data = mtcars)
# Guess where the regression model is stored
names(tricky_list)
# Use names() and str() on the model element
names(tricky_list[["model"]])
str(tricky_list[["model"]])
# Subset the coefficients element
tricky_list[["model"]][["coefficients"]]
tricky_list <- lm(formula = mpg ~ wt, data = mtcars,
x = TRUE, y = TRUE)
# Guess where the regression model is stored
names(tricky_list)
# Use names() and str() on the model element
names(tricky_list[["model"]])
str(tricky_list[["model"]])
str(tricky_list)
tricky_list <- str(tricky_list)
# Guess where the regression model is stored
names(tricky_list)
tricky_list <- lm(formula = mpg ~ wt, data = mtcars,
x = TRUE, y = TRUE)
tricky_list <- str(tricky_list)
lm <- lm(formula = mpg ~ wt, data = mtcars,
x = TRUE, y = TRUE)
lm <- lm(formula = mpg ~ wt, data = mtcars,
x = TRUE, y = TRUE)
tricky_list <- str(lm)
# Guess where the regression model is stored
names(tricky_list)
model <- lm(formula = mpg ~ wt, data = mtcars,
x = TRUE, y = TRUE)
tricky_list <- str(model)
str(model)
tricky_list<- list()
list <<- str(model)
typeof(str(model))
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
model <- lm(formula = mpg ~ wt, data = mtcars,
x = TRUE, y = TRUE)
typeof(str(model))
tricky_list<- str(model)
tricky_list <- lm(formula = mpg ~ wt, data = mtcars,
x = TRUE, y = TRUE)
# Guess where the regression model is stored
names(tricky_list)
# Use names() and str() on the model element
names(tricky_list[["model"]])
str(tricky_list[["model"]])
str(tricky_list[["model"]])
# Use names() and str() on the model element
names(tricky_list[["model"]])
rnorm(10)
set.seed(1)
df <- data.frame(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
df
df[[1]]
for (i in seq_along(df)) {
print(median(df[[i]]))
}
for (i in 1:ncol(df)) {
print(median(df[[i]]))
}
for (i in seq_along(df)) {
print(median(df[[i]]))
}
empty_df <- data.frame()
for (i in 1:ncol(empty_df)) {
print(median(empty_df[[i]]))
}
for (i in seq_along(empty_df)) {
print(median(empty_df[[i]]))
}
# Create new double vector: output
output <- vector(mode = "double")
# Alter the loop
for (i in seq_along(df)) {
# Change code to store result in output
output[[i]] <- median(df[[i]])
}
# Print output
output
p_load(purrr)
p_load(purrr)
# Find the mean of each column
map_dbl(planes, mean)
p_load(nycflights13)
p_load(purrr)
p_load(nycflights13)
# Find the mean of each column
map_dbl(planes, mean)
# Find the mean of each column, excluding missing values
map_dbl(planes, mean, na.rm = TRUE)
# Find the 5th percentile of each column, excluding missing values
map_dbl(planes, quantile, probs = c(0.05), na.rm = TRUE)
# Find the 5th percentile of each column, excluding missing values
map_dbl(planes, quantile, probs = c(0.05),
na.rm = TRUE)
p_load(purrr)
p_load(nycflights13)
# Find the mean of each column
map_dbl(planes, mean)
# Find the mean of each column, excluding missing values
map_dbl(planes, mean, na.rm = TRUE)
# Find the 5th percentile of each column, excluding missing values
map_dbl(planes, quantile, probs = c(0.05),na.rm = TRUE)
# Find the columns that are numeric
map_lgl(planes, is.numeric)
# Find the type of each column
map_chr(planes, typeof)
# Find a summary of each column
map(planes, summary)
df
map(df, function(x) sum(is.na(x)))
map_dbl(df, function(x) sum(is.na(x)))
map_dbl(df, ~sum(is.na(.)))
cyl <- split(mtcars,cyl)
cyl <- split(mtcars,mtcars$cyl)
cyl
map(cyl,~lm(mpg~wt,data = .))
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
urls <- list()
urls[["example"]] <- "http://example.org"
urls[["rproj"]] <- "http://www.r-project.org"
urls[["asdf"]] <- "http://asdfasdasdkfjlda"
urls
# Define safe_readLines() and html
safe_readLines <- safely(readLines)
library(purrr)
# Define safe_readLines() and html
safe_readLines <- safely(readLines)
html <- map(urls, safe_readLines)
# Examine the structure of transpose(html)
html
transpose(html)
# Initialize n
n <- list(5, 10, 20)
# Create a list mu containing the values: 1, 5, and 10
mu <- list(1, 5, 10)
# Edit to call map2() on n and mu with rnorm() to simulate three samples
map2(n, mu, rnorm)
# Initialize n and mean and sd
n <- list(5, 10, 20)
mu <- list(1, 5, 10)
sd <- list(0.1, 1, 0.1)
# Edit this call to pmap() to iterate over the sd list as well
pmap(list(n, mu, sd), rnorm)
# Initialize n and mean and sd
n <- list(5, 10, 20)
mu <- list(1, 5, 10)
sd <- list(0.1, 1, 0.1)
# Edit this call to pmap() to iterate over the sd list as well
pmap(list(mean = mu, n = n, sd = sd), rnorm)
# Define list of functions
funs <- list("rnorm", "runif", "rexp")
# Parameter list for rnorm()
rnorm_params <- list(mean = 10)
# Add a min element with value 0 and max element with value 5
runif_params <- list(min = 0, max = 5)
# Add a rate element with value 5
rexp_params <- list(rate = 5)
# Define params for each function
params <- list(
rnorm_params,
runif_params,
rexp_params
)
# Call invoke_map() on funs supplying params and setting n to 5
invoke_map(funs, params, n = 5)
x<- list(1,"as",4)
map(x,print)
walk(x,print)
# Define list of functions
funs <- list(Normal = "rnorm", Uniform = "runif", Exp = "rexp")
# Define params
params <- list(
Normal = list(mean = 10),
Uniform = list(min = 0, max = 5),
Exp = list(rate = 5)
)
# Assign the simulated samples to sims
sims <- invoke_map(funs, params, n = 50)
# Use walk() to make a histogram of each element in sims
walk(sims, hist)
# Replace "Sturges" with reasonable breaks for each sample
breaks_list <- list(
Normal = seq(6, 16, 0.5),
Uniform = seq(0, 5, 0.25),
Exp = seq(0, 1.5, 0.1)
)
# Use walk2() to make histograms with the right breaks
walk2(sims, breaks_list, hist)
